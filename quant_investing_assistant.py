{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMmvWbjukDDARG+96anJO24"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["\n","#!/usr/bin/env python3\n","# -*- coding: utf-8 -*-\n","\n","\"\"\"\n","Quant Assistant v6 — Global + India + Singapore + Live News (Free Sources)\n","- Multi-provider OHLCV (Yahoo, NSEpy, Stooq) with timezone-normalized indices\n","- 10+ technical indicators (EMA cross, RSI, MACD, ADX, ATR, OBV, MFI, Bollinger, W%R)\n","- Region-aware sentiment (^GSPC/^NDX/^VIX or ^NSEI/^NSEBANK/^INDIAVIX or ^STI/^HSI/^VIX)\n","- Fundamentals-lite (PE/ROE/margins/debt if available)\n","- Strong, clear verdicts: STRONG BUY/LONG, BUY, HOLD, SELL, STRONG SELL/SHORT\n","- Conviction & risk sizing (risk caps; tranche sizing)\n","- Defaults for all inputs (Economy: US, Cash: 1000, Desired: 5%, Stock: MSFT, Asset: Stocks)\n","- Live news from free RSS (Google News + known IR feeds) — no API keys\n","\"\"\"\n","\n","import os, math, sys\n","from datetime import datetime, timedelta, timezone\n","import numpy as np\n","import pandas as pd\n","import yfinance as yf\n","\n","# Optional providers\n","try:\n","    from nsepy import get_history as nse_get_history\n","    HAVE_NSEPY = True\n","except Exception:\n","    HAVE_NSEPY = False\n","\n","try:\n","    from pandas_datareader import data as pdr\n","    HAVE_PDR = True\n","except Exception:\n","    HAVE_PDR = False\n","\n","# Lightweight RSS news (no API key)\n","try:\n","    import feedparser\n","    HAVE_FEEDPARSER = True\n","except Exception:\n","    HAVE_FEEDPARSER = False\n","\n","\n","# ================= Utility =================\n","def fmt(x, d=2):\n","    try:\n","        if x is None or (isinstance(x, float) and (math.isnan(x) or math.isinf(x))):\n","            return \"—\"\n","        return f\"{x:.{d}f}\"\n","    except Exception:\n","        return \"—\"\n","\n","def pct(x):\n","    return f\"{x*100:.1f}%\" if x is not None and not (isinstance(x, float) and math.isnan(x)) else \"—\"\n","\n","def clamp01(x):\n","    try:\n","        return max(0.0, min(1.0, float(x)))\n","    except Exception:\n","        return 0.0\n","\n","def _ensure_utc_naive_index(df: pd.DataFrame) -> pd.DataFrame:\n","    if df is None or df.empty:\n","        return df\n","    out = df.copy()\n","    if not isinstance(out.index, pd.DatetimeIndex):\n","        out.index = pd.to_datetime(out.index, errors=\"coerce\")\n","    if isinstance(out.index, pd.DatetimeIndex) and out.index.tz is not None:\n","        out.index = out.index.tz_convert(\"UTC\").tz_localize(None)\n","    else:\n","        out.index = pd.DatetimeIndex(out.index).tz_localize(None)\n","    out = out[~out.index.isna()].sort_index()\n","    return out\n","\n","\n","# ================= Data layer (multi-provider, free) =================\n","def _std_df(df: pd.DataFrame) -> pd.DataFrame:\n","    if df is None or df.empty:\n","        return pd.DataFrame()\n","    out = df.copy()\n","\n","    # Normalize column names\n","    def pick(name):\n","        for c in out.columns:\n","            if c.lower().replace(\" \", \"\") == name.lower().replace(\" \", \"\"):\n","                return c\n","        return None\n","\n","    ren = {}\n","    for want in [\"Open\",\"High\",\"Low\",\"Close\",\"Adj Close\",\"Volume\"]:\n","        c = pick(want)\n","        if c and c != want:\n","            ren[c] = want\n","    out = out.rename(columns=ren)\n","\n","    for need in [\"Open\",\"High\",\"Low\",\"Close\",\"Adj Close\",\"Volume\"]:\n","        if need not in out.columns:\n","            out[need] = np.nan\n","\n","    out = out[[\"Open\",\"High\",\"Low\",\"Close\",\"Adj Close\",\"Volume\"]]\n","    out = _ensure_utc_naive_index(out)  # ✅ normalize index (tz-naive UTC)\n","    return out\n","\n","def yf_history(symbol: str, years=5, interval=\"1d\"):\n","    try:\n","        period = f\"{max(1,int(years))}y\"\n","        df = yf.Ticker(symbol).history(period=period, interval=interval, auto_adjust=True)\n","        return _std_df(df)\n","    except Exception:\n","        return pd.DataFrame()\n","\n","def nse_history(symbol_no_suffix: str, years=5):\n","    if not HAVE_NSEPY: return pd.DataFrame()\n","    try:\n","        end = datetime.utcnow().date()\n","        start = end - timedelta(days=365*max(1,int(years)))\n","        df = nse_get_history(symbol=symbol_no_suffix, start=start, end=end)\n","        if df is None or df.empty: return pd.DataFrame()\n","        df.index = pd.to_datetime(df.index)\n","        if \"Adj Close\" not in df.columns:\n","            df[\"Adj Close\"] = df[\"Close\"]\n","        return _std_df(df)\n","    except Exception:\n","        return pd.DataFrame()\n","\n","def stooq_history(symbol: str, years=5):\n","    if not HAVE_PDR: return pd.DataFrame()\n","    try:\n","        end = datetime.utcnow().date()\n","        start = end - timedelta(days=365*max(1,int(years)))\n","        df = pdr.DataReader(symbol, \"stooq\", start, end)\n","        return _std_df(df)\n","    except Exception:\n","        return pd.DataFrame()\n","\n","def normalize_symbol(asset_class: str, region: str, raw: str) -> str:\n","    s = (raw or \"\").strip().upper()\n","    if not s: return s\n","    if asset_class in {\"Stocks\",\"Funds/ETFs\"}:\n","        if region == \"India\" and not (s.endswith(\".NS\") or s.endswith(\".BO\")):\n","            s = s + \".NS\"\n","        elif region == \"Singapore\" and not s.endswith(\".SI\"):\n","            s = s + \".SI\"\n","    return s\n","\n","def history_multi(asset_class: str, region: str, symbol: str, years=5):\n","    used = []\n","    df = pd.DataFrame()\n","\n","    if region == \"India\":\n","        base = symbol.replace(\".NS\",\"\").replace(\".BO\",\"\")\n","        sym = symbol if (symbol.endswith(\".NS\") or symbol.endswith(\".BO\")) else f\"{symbol}.NS\"\n","        providers = [\n","            (\"NSEpy\", lambda: nse_history(base, years)),\n","            (\"Yahoo\", lambda: yf_history(sym, years)),\n","            (\"Stooq\", lambda: stooq_history(sym, years)),\n","        ]\n","    elif region == \"Singapore\":\n","        sym = symbol if symbol.endswith(\".SI\") else f\"{symbol}.SI\"\n","        providers = [\n","            (\"Yahoo\", lambda: yf_history(sym, years)),\n","            (\"Stooq\", lambda: stooq_history(sym, years)),\n","        ]\n","    else:\n","        providers = [\n","            (\"Yahoo\", lambda: yf_history(symbol, years)),\n","            (\"Stooq\", lambda: stooq_history(symbol, years)),\n","        ]\n","\n","    for name, fn in providers:\n","        d = fn()\n","        d = _ensure_utc_naive_index(d)\n","        if d is not None and not d.empty:\n","            used.append(name)\n","            if df.empty:\n","                df = d\n","            else:\n","                # combine_first requires consistent index types — already normalized above\n","                df = df.combine_first(d)\n","    return df, used\n","\n","\n","# ================= Indicators (10+) =================\n","def sma(s,n): return s.rolling(n).mean()\n","def ema(s,n): return s.ewm(span=n, adjust=False).mean()\n","def rsi(s, n=14):\n","    d = s.diff(); up = d.clip(lower=0); down = -d.clip(upper=0)\n","    rs = up.rolling(n).mean() / (down.rolling(n).mean() + 1e-9)\n","    return 100 - (100/(1+rs))\n","def macd(s, f=12, sl=26, sig=9):\n","    m = ema(s,f) - ema(s,sl)\n","    return m, ema(m,sig)\n","def bollinger(s,n=20):\n","    mid = sma(s,n); sd = s.rolling(n).std()\n","    return mid, mid+2*sd, mid-2*sd\n","def atr(h,l,c,n=14):\n","    tr = pd.concat([(h-l).abs(), (h-c.shift()).abs(), (l-c.shift()).abs()], axis=1).max(axis=1)\n","    return tr.rolling(n).mean()\n","def obv(c,v): return (np.sign(c.diff())*v).fillna(0).cumsum()\n","def mfi(h,l,c,v,n=14):\n","    tp=(h+l+c)/3; pmf=tp.where(tp>tp.shift(),0)*v; nmf=tp.where(tp<tp.shift(),0)*v\n","    mr = pmf.rolling(n).sum() / (nmf.rolling(n).sum()+1e-9)\n","    return 100 - (100/(1+mr))\n","def adx(h,l,c,n=14):\n","    plus_dm = h.diff(); minus_dm = l.diff().abs()\n","    plus_dm[plus_dm<0]=0; minus_dm[minus_dm<0]=0\n","    tr = atr(h,l,c,n)\n","    plus_di = 100*(plus_dm.rolling(n).sum()/(tr+1e-9))\n","    minus_di= 100*(minus_dm.rolling(n).sum()/(tr+1e-9))\n","    dx = (abs(plus_di-minus_di)/((plus_di+minus_di)+1e-9))*100\n","    return dx.rolling(n).mean()\n","def williams_r(h,l,c,n=14):\n","    hh=h.rolling(n).max(); ll=l.rolling(n).min()\n","    return -100*(hh-c)/(hh-ll+1e-9)\n","\n","\n","# ================= Technical scoring =================\n","def score_technicals(df: pd.DataFrame, holding_months: int):\n","    c,h,l,v = df[\"Close\"], df[\"High\"], df[\"Low\"], df[\"Volume\"]\n","    short,long_ = (20,50) if holding_months<=3 else (50,200)\n","    ema_s, ema_l = ema(c, short), ema(c, long_)\n","    r14 = rsi(c,14); macd_line, macd_sig = macd(c); adx14 = adx(h,l,c,14)\n","    mfi14 = mfi(h,l,c,v,14); atr14 = atr(h,l,c,14); obv_val = obv(c,v)\n","    bb_mid, bb_up, bb_lo = bollinger(c,20); wr14 = williams_r(h,l,c,14)\n","\n","    s=0.0\n","    s += 0.15 if ema_s.iloc[-1] > ema_l.iloc[-1] else -0.15\n","    s += 0.10 if macd_line.iloc[-1] > macd_sig.iloc[-1] else -0.10\n","    s += 0.10 if 45 < r14.iloc[-1] < 70 else (-0.10 if r14.iloc[-1] > 75 or r14.iloc[-1] < 30 else 0)\n","    s += 0.06 if adx14.iloc[-1] > 25 else -0.04\n","    s += 0.04 if mfi14.iloc[-1] > 50 else -0.04\n","    s += 0.04 if wr14.iloc[-1] > -60 else (-0.02 if wr14.iloc[-1] < -80 else 0)\n","    s += 0.04 if obv_val.iloc[-1] > obv_val.iloc[-10] else -0.04\n","    s += 0.03 if (bb_mid.iloc[-1] < c.iloc[-1] < bb_up.iloc[-1]) else (-0.03 if c.iloc[-1] < bb_mid.iloc[-1] else 0)\n","    vol_ratio = float((atr14.iloc[-1]/c.iloc[-1])) if c.iloc[-1] else 0.0\n","    s += 0.04 if vol_ratio < 0.04 else -0.04\n","\n","    score = clamp01((s+1)/2.0)\n","    snapshot = dict(\n","        price=float(c.iloc[-1]), ema_short=float(ema_s.iloc[-1]), ema_long=float(ema_l.iloc[-1]),\n","        rsi=float(r14.iloc[-1]), macd=float(macd_line.iloc[-1]), macd_signal=float(macd_sig.iloc[-1]),\n","        adx=float(adx14.iloc[-1]), mfi=float(mfi14.iloc[-1]), wr=float(wr14.iloc[-1]),\n","        atr=float(atr14.iloc[-1]), obv=float(obv_val.iloc[-1]),\n","        bb_mid=float(bb_mid.iloc[-1]), bb_up=float(bb_up.iloc[-1]), bb_lo=float(bb_lo.iloc[-1])\n","    )\n","    return score, snapshot\n","\n","\n","# ================= Fundamentals (lightweight) =================\n","def fundamentals_score(info: dict):\n","    if not info: return 0.6\n","    s=0.5\n","    pe_t = info.get(\"trailingPE\"); pe_f = info.get(\"forwardPE\")\n","    roe = info.get(\"returnOnEquity\"); d2e = info.get(\"debtToEquity\"); pm = info.get(\"profitMargins\")\n","    if pe_t and pe_t<20: s += 0.07\n","    if pe_f and pe_f<22: s += 0.07\n","    if roe and roe>0.15: s += 0.10\n","    if d2e and d2e<100: s += 0.05\n","    if pm and pm>0.10: s += 0.08\n","    return clamp01(s)\n","\n","\n","# ================= Sentiment (region-aware) =================\n","def market_sentiment(region: str):\n","    if region == \"India\":\n","        idx1, idx2, vol = \"^NSEI\",\"^NSEBANK\",\"^INDIAVIX\"\n","    elif region == \"Singapore\":\n","        idx1, idx2, vol = \"^STI\",\"^HSI\",\"^VIX\"\n","    else:\n","        idx1, idx2, vol = \"^GSPC\",\"^NDX\",\"^VIX\"\n","    packs = {k:yf.Ticker(k).history(period=\"6mo\") for k in [idx1,idx2,vol]}\n","    def ret(df,n=21):\n","        try:\n","            return float(df[\"Close\"].iloc[-1]/df[\"Close\"].iloc[-n]-1) if len(df)>n else 0.0\n","        except Exception:\n","            return 0.0\n","    r1m = ret(packs[idx1],21); r3m = ret(packs[idx2],63)\n","    vnow = float(packs[vol][\"Close\"].iloc[-1]) if not packs[vol].empty else 20.0\n","    def nret(x): return 0.5 + x/0.20  # -10%->0, +10%->1 (clamped later)\n","    vlow, vhigh = (12, 28) if region!=\"US/Global\" else (14, 30)\n","    if vnow <= vlow: vscore = 1.0\n","    elif vnow >= vhigh: vscore = 0.2\n","    else: vscore = 1.0 - (vnow - vlow) * (0.8/(vhigh-vlow))\n","    score = clamp01(0.65*clamp01((nret(r1m)+nret(r3m))/2.0) + 0.35*vscore)\n","    breakdown = dict(idx1_1m=r1m, idx2_3m=r3m, vol=vnow, indices=(idx1,idx2), vol_symbol=vol)\n","    return score, breakdown\n","\n","\n","# ================= Verdict & Sizing =================\n","def verdict(fscore, tscore, sentiment, holding_months):\n","    if holding_months <= 3: wf, wt = 0.45, 0.55\n","    elif holding_months <= 6: wf, wt = 0.55, 0.45\n","    elif holding_months <= 12: wf, wt = 0.62, 0.38\n","    else: wf, wt = 0.70, 0.30\n","    base = clamp01(wf*fscore + wt*tscore + (sentiment-0.5)*0.06)\n","    if base >= 0.82 and fscore >= 0.70: return base, \"STRONG BUY / LONG\"\n","    if base >= 0.68: return base, \"BUY\"\n","    if base >= 0.52: return base, \"HOLD / NEUTRAL\"\n","    if base >= 0.38: return base, \"SELL / REDUCE\"\n","    return base, \"STRONG SELL / SHORT\"\n","\n","def risk_cap_pct(risk_level):\n","    r = (risk_level or \"medium\").lower()\n","    return 2.0 if r==\"low\" else (12.0 if r==\"high\" else 5.0)  # percent of portfolio\n","\n","def allocation_recommendation(conviction_pct, risk_level, desired_pct):\n","    cap = risk_cap_pct(risk_level)\n","    target = min(max(desired_pct, 0.0), cap)\n","    return round(target * (conviction_pct/100.0), 2), cap\n","\n","\n","# ================= Explanations =================\n","def explain_choice(name, verdict_text, t, sent, info):\n","    bullets = []\n","    if \"BUY\" in verdict_text:\n","        bullets.append(\"Momentum is improving (MACD > Signal) while trend stays constructive (ADX > 25).\")\n","        if t.get(\"rsi\") and t[\"rsi\"] < 70:\n","            bullets.append(\"RSI is not overbought, giving room for upside if it reclaims 50–60.\")\n","    if \"SELL\" in verdict_text:\n","        bullets.append(\"Momentum deterioration (RSI < 50 or bearish MACD cross) warrants caution.\")\n","    if sent >= 0.6:\n","        bullets.append(\"Broader market sentiment is supportive, a tailwind for entries.\")\n","    if sent < 0.4:\n","        bullets.append(\"Market risk appetite is soft; prefer staggered sizing and tighter stops.\")\n","    if info:\n","        if info.get(\"profitMargins\", 0) and info[\"profitMargins\"] > 0.1:\n","            bullets.append(\"Healthy profitability profile supports medium-term compounding.\")\n","        if info.get(\"returnOnEquity\", 0) and info[\"returnOnEquity\"] > 0.15:\n","            bullets.append(\"ROE suggests solid capital efficiency.\")\n","    return f\"{name}: \" + \" \".join(bullets)\n","\n","\n","# ================= Live News (free RSS) =================\n","MSFT_IR_RSS = \"https://www.microsoft.com/en-us/Investor/rss.xml\"\n","COMPANY_IR_RSS = {\n","    \"MSFT\": MSFT_IR_RSS,\n","    # Add more company IR RSS feeds if you like\n","}\n","\n","def fetch_news(ticker: str, long_name: str = \"\", max_items: int = 6, days=14):\n","    if not HAVE_FEEDPARSER:\n","        return [(\"Install feedparser for live news\", \"\", \"\", \"\")]\n","    q = long_name or ticker\n","    gnews = f\"https://news.google.com/rss/search?q={q}+when:{days}d&hl=en-US&gl=US&ceid=US:en\"\n","    feeds = [gnews]\n","    if ticker in COMPANY_IR_RSS:\n","        feeds.append(COMPANY_IR_RSS[ticker])\n","\n","    out = []\n","    cutoff = datetime.now(timezone.utc) - timedelta(days=days)\n","    for url in feeds:\n","        try:\n","            fp = feedparser.parse(url)\n","            for e in fp.entries:\n","                title = getattr(e, \"title\", \"\").strip()\n","                link = getattr(e, \"link\", \"\").strip()\n","                src = getattr(e, \"source\", {}).get(\"title\", \"\") if hasattr(e, \"source\") else \"\"\n","                pub = \"\"\n","                try:\n","                    if hasattr(e, \"published_parsed\") and e.published_parsed:\n","                        dt = datetime(*e.published_parsed[:6], tzinfo=timezone.utc)\n","                        if dt >= cutoff:\n","                            pub = dt.strftime(\"%Y-%m-%d\")\n","                        else:\n","                            continue\n","                except Exception:\n","                    pass\n","                if title:\n","                    out.append((title, src, pub, link))\n","        except Exception:\n","            continue\n","\n","    # Deduplicate & trim\n","    seen = set(); unique=[]\n","    for t in out:\n","        if t[0] not in seen:\n","            unique.append(t); seen.add(t[0])\n","    return unique[:max_items]\n","\n","\n","# ================= Main analysis flow =================\n","ASSET_CLASSES = [\"Stocks\",\"Funds/ETFs\",\"Futures\",\"Forex\",\"Crypto\",\"Indices\",\"Bonds\",\"Economy\",\"Options\"]\n","REGIONS = [\"US/Global\",\"India\",\"Singapore\"]\n","\n","DEFAULTS = dict(\n","    economy=\"US\",\n","    asset=\"Stocks\",\n","    region=\"US/Global\",\n","    ticker=\"MSFT\",\n","    years=5,\n","    risk=\"high\",          # low / medium / high\n","    cash=1000.0,\n","    portfolio=30000.0,\n","    desired_pct=5.0,\n","    hold_months=6\n",")\n","\n","def analyze(asset_class: str, region: str, ticker: str, years: int,\n","            risk: str, cash: float, portfolio: float, desired_pct: float, hold_m: int):\n","    norm = normalize_symbol(asset_class, region, ticker)\n","    tk = yf.Ticker(norm)\n","    info = {}\n","    try:\n","        info = tk.get_info() if hasattr(tk, \"get_info\") else tk.info\n","    except Exception:\n","        info = getattr(tk, \"info\", {}) or {}\n","\n","    long_name = info.get(\"longName\") or info.get(\"shortName\") or ticker\n","    currency = info.get(\"currency\", \"USD\")\n","    sector = info.get(\"sector\", \"—\"); industry = info.get(\"industry\", \"—\")\n","\n","    hist, providers = history_multi(asset_class, region, norm, years=years)\n","    if hist is None or hist.empty:\n","        raise RuntimeError(\"No historical data from free sources (try a different symbol/region).\")\n","\n","    tscore, tsnap = score_technicals(hist, hold_m)\n","    fscore = fundamentals_score(info) if asset_class in {\"Stocks\",\"Funds/ETFs\"} else 0.6\n","    sent, sbd = market_sentiment(region)\n","    comp, call = verdict(fscore, tscore, sent, hold_m)\n","    conviction = round(clamp01(comp) * 100.0, 1)\n","    rec_pct, cap_pct = allocation_recommendation(conviction, risk, desired_pct)\n","\n","    now = datetime.now(timezone.utc).strftime(\"%Y-%m-%d %H:%M UTC\")\n","    print(\"=\"*110)\n","    print(f\"{long_name} ({norm}) | Asset: {asset_class} | Region: {region} | Sector: {sector} | Industry: {industry} | CCY: {currency}\")\n","    print(f\"As of: {now} | Data sources: {', '.join(providers) if providers else '—'}\")\n","    print(\"-\"*110)\n","    print(\"SCORES\")\n","    print(f\"  Fundamentals: {fmt(fscore)} | Technicals: {fmt(tscore)} | Market Sentiment: {fmt(sent)} | Composite: {fmt(comp)}\")\n","    print(f\"  Verdict: {call} | Conviction: {conviction:.1f}%\")\n","\n","    print(\"\\nPOSITION SIZING\")\n","    print(f\"  Risk level: {risk.upper()} | Max cap per idea: {cap_pct:.2f}% | Desired: {desired_pct:.2f}% → Recommended now: {rec_pct:.2f}%\")\n","    if portfolio and portfolio>0:\n","        rec_d = round((rec_pct/100.0)*portfolio,2)\n","        deploy = min(rec_d, cash) if cash is not None else rec_d\n","        print(f\"  Portfolio: ${portfolio:,.2f} | Cash: ${cash:,.2f} | Recommended $: ${rec_d:,.2f} | Deploy now: ${deploy:,.2f}\")\n","\n","    print(\"\\nTECHNICAL SNAPSHOT\")\n","    print(f\"  Price: {fmt(tsnap['price'])} {currency} | EMA(short/long): {fmt(tsnap['ema_short'])}/{fmt(tsnap['ema_long'])}\")\n","    print(f\"  RSI(14): {fmt(tsnap['rsi'])} | MACD/Signal: {fmt(tsnap['macd'])}/{fmt(tsnap['macd_signal'])} | ADX: {fmt(tsnap['adx'])}\")\n","    print(f\"  MFI: {fmt(tsnap['mfi'])} | W%R: {fmt(tsnap['wr'])} | ATR: {fmt(tsnap['atr'])} | BB(mid/up/low): {fmt(tsnap['bb_mid'])}/{fmt(tsnap['bb_up'])}/{fmt(tsnap['bb_lo'])}\")\n","\n","    print(\"\\nWHY THIS CALL (Plain-English)\")\n","    print(\" \", explain_choice(long_name, call, dict(rsi=tsnap['rsi']), sent, info))\n","\n","    print(\"\\nLATEST NEWS (free sources)\")\n","    news_items = fetch_news(ticker=ticker, long_name=long_name, max_items=6, days=14)\n","    for i, (title, src, pub, link) in enumerate(news_items, 1):\n","        src_disp = f\" — {src}\" if src else \"\"\n","        pub_disp = f\" [{pub}]\" if pub else \"\"\n","        print(f\"  {i:>2}. {title}{src_disp}{pub_disp}\")\n","        if link: print(f\"      {link}\")\n","\n","    print(\"\\nNotes\")\n","    print(\"  • Educational output, not financial advice. Check liquidity, earnings dates, and diversification.\")\n","    print(\"  • News feed uses Google News RSS + known company IR RSS where available (no API key).\")\n","    print(\"=\"*110)\n","\n","\n","# ================= CLI with Defaults =================\n","def main():\n","    print(\"=== Quant Assistant v6 (All-defaults ready) ===\")\n","    ASSET_CLASSES = [\"Stocks\",\"Funds/ETFs\",\"Futures\",\"Forex\",\"Crypto\",\"Indices\",\"Bonds\",\"Economy\",\"Options\"]\n","    REGIONS = [\"US/Global\",\"India\",\"Singapore\"]\n","    DEFAULTS = dict(\n","        economy=\"US\", asset=\"Stocks\", region=\"US/Global\", ticker=\"MSFT\", years=5,\n","        risk=\"high\", cash=1000.0, portfolio=30000.0, desired_pct=5.0, hold_months=6\n","    )\n","\n","    asset = input(f\"Asset class {ASSET_CLASSES} [default={DEFAULTS['asset']}]: \").strip() or DEFAULTS[\"asset\"]\n","    region = input(f\"Region {REGIONS} [default={DEFAULTS['region']}]: \").strip() or DEFAULTS[\"region\"]\n","    ticker = input(f\"Ticker [default={DEFAULTS['ticker']}]: \").strip().upper() or DEFAULTS[\"ticker\"]\n","    years = int(input(f\"Years of data [default={DEFAULTS['years']}]: \") or DEFAULTS[\"years\"])\n","    risk = input(\"Risk (low/medium/high) [default=high]: \").strip().lower() or DEFAULTS[\"risk\"]\n","    cash = float(input(f\"Available cash [default={DEFAULTS['cash']}]: \") or DEFAULTS[\"cash\"])\n","    portfolio = float(input(f\"Total portfolio value [default={DEFAULTS['portfolio']}]: \") or DEFAULTS[\"portfolio\"])\n","    desired = float(input(f\"Desired allocation % [default={DEFAULTS['desired_pct']}]: \") or DEFAULTS[\"desired_pct\"])\n","    hold = int(input(\"Holding period months (1/3/6/12/24) [default=6]: \") or DEFAULTS[\"hold_months\"])\n","\n","    analyze(asset, region, ticker, years, risk, cash, portfolio, desired, hold)\n","\n","\n","if __name__ == \"__main__\":\n","    main()\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YCN-uDBXKIP6","outputId":"0273dbc6-8c39-4f1c-ed9b-73100d141aab","executionInfo":{"status":"ok","timestamp":1761836437716,"user_tz":-480,"elapsed":128330,"user":{"displayName":"Akshat Sharma","userId":"03058389799466372945"}}},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["=== Quant Assistant v6 (All-defaults ready) ===\n","Asset class ['Stocks', 'Funds/ETFs', 'Futures', 'Forex', 'Crypto', 'Indices', 'Bonds', 'Economy', 'Options'] [default=Stocks]: stocks\n","Region ['US/Global', 'India', 'Singapore'] [default=US/Global]: \n","Ticker [default=MSFT]: nvda\n","Years of data [default=5]: \n","Risk (low/medium/high) [default=high]: \n","Available cash [default=1000.0]: \n","Total portfolio value [default=30000.0]: \n","Desired allocation % [default=5.0]: \n","Holding period months (1/3/6/12/24) [default=6]: \n"]},{"output_type":"stream","name":"stderr","text":["/tmp/ipython-input-1206962833.py:128: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n","  end = datetime.utcnow().date()\n"]},{"output_type":"stream","name":"stdout","text":["==============================================================================================================\n","NVIDIA Corporation (NVDA) | Asset: stocks | Region: US/Global | Sector: Technology | Industry: Semiconductors | CCY: USD\n","As of: 2025-10-30 15:00 UTC | Data sources: Yahoo, Stooq\n","--------------------------------------------------------------------------------------------------------------\n","SCORES\n","  Fundamentals: 0.60 | Technicals: 0.70 | Market Sentiment: 0.85 | Composite: 0.67\n","  Verdict: HOLD / NEUTRAL | Conviction: 66.6%\n","\n","POSITION SIZING\n","  Risk level: HIGH | Max cap per idea: 12.00% | Desired: 5.00% → Recommended now: 3.33%\n","  Portfolio: $30,000.00 | Cash: $1,000.00 | Recommended $: $999.00 | Deploy now: $999.00\n","\n","TECHNICAL SNAPSHOT\n","  Price: 203.08 USD | EMA(short/long): 186.86/171.58\n","  RSI(14): 84.68 | MACD/Signal: 5.45/3.03 | ADX: 36.72\n","  MFI: 57.86 | W%R: -25.72 | ATR: 6.32 | BB(mid/up/low): 188.77/207.87/169.67\n","\n","WHY THIS CALL (Plain-English)\n","  NVIDIA Corporation: Broader market sentiment is supportive, a tailwind for entries. Healthy profitability profile supports medium-term compounding. ROE suggests solid capital efficiency.\n","\n","LATEST NEWS (free sources)\n","   1. Install feedparser for live news\n","\n","Notes\n","  • Educational output, not financial advice. Check liquidity, earnings dates, and diversification.\n","  • News feed uses Google News RSS + known company IR RSS where available (no API key).\n","==============================================================================================================\n"]}]}]}
